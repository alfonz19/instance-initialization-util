package com.gmail.alfonz19.util.initialize.generator;

import com.gmail.alfonz19.util.initialize.builder.PathContext;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public interface Generator<T> {
    /**
     * Method to be called by client code on top level generators, the ones generating instance for client code.
     * If you're writing some generator this shouldn't be your entry point, as this would corrupt path creation when
     * generators are nested. This method is the one which should be called from client code.
     *
     * @return newly created single instance.
     */
    default T create() {
        return create(new PathContext());
    }

    /**
     * @param pathContext pathContext for this generator, namely containing path leading to item to be
     *                    generated by this generator.
     * @return generated instance.
     */
    T create(PathContext pathContext);

    /**
     * Variant for {@link #create()} which will create {@code number} instances via single call.
     * Intended for user code calls on top level generators.
     */
    default List<T> create(int number) {
        return Stream.generate(this::create).limit(number).collect(Collectors.toList());
    }

    /**
     * Variant for {@link #create(PathContext)} allowing to create {@code number} instances via single call.
     */
    default List<T> create(int number, PathContext pathContext) {
        return Stream.generate(()->this.create(pathContext)).limit(number).collect(Collectors.toList());
    }
}
